{
  "template": {
    "prefix": "tmp",
    "body": [
      "#include <bits/stdc++.h>",
      "#define all(x) (x).begin(),(x).end()",
      "#define rep(i, n) for (int i = 0; i < (int)(n); i++)",
      "#define repi(i, n) for (int i = 0; i < (int)(n);)",
      "#define rep0(i, n) for (int i = 0; i <= (int)(n); i++)",
      "#define rep1(i, n) for (int i = 1; i <= (int)(n); i++)",
      "",
      "using namespace std;",
      "",
      "int main(void) {",
      "  $1",
      "}"
    ]
  },
  "repeat": {
    "prefix": "rep",
    "body": ["rep($1, $2) {$3}"]
  },
  "repeat inifinity": {
    "prefix": "repi",
    "body": ["repi($1, $2) {$3}"]
  },
  "repeat 0": {
    "prefix": "rep0",
    "body": ["rep0($1, $2) {$3}"]
  },
  "reppeat 1": {
    "prefix": "rep1",
    "body": ["rep1($1, $2) {$3}"]
  },
  "bool equal": {
    "prefix": "be",
    "body": ["bool $1 = $0;"]
  },
  "int equal": {
    "prefix": "ie",
    "body": ["int $1 = $0;"]
  },
  "string equal": {
    "prefix": "se",
    "body": ["string $1 = $0;"]
  },
  "cin >>": {
    "prefix": "cin",
    "body": ["cin >> ${1:name};", "$0"]
  },
  "int dec & cin": {
    "prefix": "icin",
    "body": ["int $1;", "cin >> $1;", "$0"]
  },
  "string dec & cin": {
    "prefix": "scin",
    "body": ["string $1;", "cin >> $1;", "$0"]
  },
  "cout << endl": {
    "prefix": "cou",
    "body": ["cout << ${1:name} << endl;"]
  },
  "cout variable name": {
    "prefix": "couv",
    "body": ["cout << \"$1: \" << $1 << endl;"]
  },
  "vector int": {
    "prefix": "vi",
    "body": ["vector<int> $1($2);"]
  },
  "vector string": {
    "prefix": "vs",
    "body": ["vector<string> $1($2);"]
  },
  "for range": {
    "prefix": "fr",
    "body": ["for(auto&& x : $1) {$2}"]
  },
  "if even": {
    "prefix": "ifeven",
    "body": ["", "// isEven", "if ($1 % 2 == 0) {$2}"]
  },
  "if odd": {
    "prefix": "ifodd",
    "body": ["", "// isOdd", "if ($1 % 2 != 0) {$2}"]
  },
  "sort": {
    "prefix": "sort",
    "body": ["sort($1, $1 + $2);"]
  },
  "sort greater": {
    "prefix": "sortg",
    "body": ["sort($1, $1 + $2, greater<int>());"]
  },
  "vector sort": {
    "prefix": "vsort",
    "body": ["sort(all($1));"]
  },
  "vector sort greater": {
    "prefix": "vsortg",
    "body": ["sort(all($1), greater<int>());"]
  },
  "vector max": {
    "prefix": "vmax",
    "body": ["*max_element(all($1));"]
  },
  "reverse": {
    "prefix": "rev",
    "body": ["reverse($1.begin(), $1.end());"]
  },
  "begin": {
    "prefix": "beg",
    "body": ["$1.begin()"]
  },
  "end": {
    "prefix": "end",
    "body": ["$1.end()"]
  },
  "size": {
    "prefix": "sz",
    "body": ["$1.size()"]
  }
}
